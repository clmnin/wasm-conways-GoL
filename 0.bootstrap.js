(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/wasm_game_of_life.js":
/*!***********************************!*\
  !*** ../pkg/wasm_game_of_life.js ***!
  \***********************************/
/*! exports provided: __wbg_log_55d0b01f9e295146, Cell, __wbg_error_cc95a3d302735ca3, Universe, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_log_55d0b01f9e295146\", function() { return __wbg_log_55d0b01f9e295146; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Cell\", function() { return Cell; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_cc95a3d302735ca3\", function() { return __wbg_error_cc95a3d302735ca3; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_game_of_life_bg */ \"../pkg/wasm_game_of_life_bg.wasm\");\n/* tslint:disable */\n\n\nconst __wbg_log_55d0b01f9e295146_target = console.log;\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nfunction __wbg_log_55d0b01f9e295146(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    __wbg_log_55d0b01f9e295146_target(varg0);\n}\n/**\n* Universe implementation\n*/\nconst Cell = Object.freeze({ Dead:0,Alive:1, });\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nconst __wbg_error_cc95a3d302735ca3_target = console.error;\n\nfunction __wbg_error_cc95a3d302735ca3(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n\n    varg0 = varg0.slice();\n    _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](arg0, arg1 * 1);\n\n    __wbg_error_cc95a3d302735ca3_target(varg0);\n}\n\nfunction freeUniverse(ptr) {\n\n    _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_universe_free\"](ptr);\n}\n/**\n* The universe has a width and a height, and a vector \\n  of cells of length width * height\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeUniverse(ptr);\n    }\n\n    /**\n    * @returns {void}\n    */\n    tick() {\n        return _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tick\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        return _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_width\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    height() {\n        return _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_height\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    cells() {\n        return _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_cells\"](this.ptr);\n    }\n    /**\n    * @param {number} arg0\n    * @param {number} arg1\n    * @returns {void}\n    */\n    toggle_cell(arg0, arg1) {\n        return _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_toggle_cell\"](this.ptr, arg0, arg1);\n    }\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        return Universe.__wrap(_wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_new\"]());\n    }\n    /**\n    * @returns {string}\n    */\n    render() {\n        const retptr = globalArgumentPtr();\n        _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_render\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\n\n\n//# sourceURL=webpack:///../pkg/wasm_game_of_life.js?");

/***/ }),

/***/ "../pkg/wasm_game_of_life_bg.wasm":
/*!****************************************!*\
  !*** ../pkg/wasm_game_of_life_bg.wasm ***!
  \****************************************/
/*! exports provided: memory, __indirect_function_table, __heap_base, __data_end, __wbindgen_global_argument_ptr, __wbg_universe_free, universe_tick, universe_width, universe_height, universe_cells, universe_toggle_cell, universe_new, universe_render, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./wasm_game_of_life */ \"../pkg/wasm_game_of_life.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/wasm_game_of_life_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-game-of-life */ \"../pkg/wasm_game_of_life.js\");\n/* harmony import */ var wasm_game_of_life_wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! wasm-game-of-life/wasm_game_of_life_bg */ \"../pkg/wasm_game_of_life_bg.wasm\");\n\r\n\r\n\r\nconst CELL_SIZE = 5; // px\r\nconst GRID_COLOR = \"#CCCCCC\";\r\nconst DEAD_COLOR = \"#FFFFFF\";\r\nconst ALIVE_COLOR = \"#000000\";\r\n\r\n// Construct the universe, and get its width and height.\r\nconst universe = wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new();\r\nconst width = universe.width();\r\nconst height = universe.height();\r\n\r\n// Give the canvas room for all of our cells and a 1px border\r\n// around each of them.\r\nconst canvas = document.getElementById(\"game-of-life-canvas\");\r\ncanvas.height = (CELL_SIZE + 1) * height + 1;\r\ncanvas.width = (CELL_SIZE + 1) * width + 1;\r\n\r\nconst ctx = canvas.getContext('2d');\r\nlet animationId = null;\r\n\r\nconst renderLoop = () => {\r\n    fps.render();\r\n    \r\n    universe.tick();\r\n    drawGrid();\r\n    drawCells();\r\n\r\n    animationId = requestAnimationFrame(renderLoop);\r\n};\r\n\r\n/***************** */\r\n/**     GFX        */\r\n/***************** */\r\n// grid between cells, equally spaced horizontal and vertical lines\r\nconst drawGrid = () => {\r\n    ctx.beginPath();\r\n    ctx.strokeStyle = GRID_COLOR;\r\n  \r\n    // Vertical lines.\r\n    for (let i = 0; i <= width; i++) {\r\n      ctx.moveTo(i * (CELL_SIZE + 1) + 1, 0);\r\n      ctx.lineTo(i * (CELL_SIZE + 1) + 1, (CELL_SIZE + 1) * height + 1);\r\n    }\r\n  \r\n    // Horizontal lines.\r\n    for (let j = 0; j <= height; j++) {\r\n      ctx.moveTo(0,                           j * (CELL_SIZE + 1) + 1);\r\n      ctx.lineTo((CELL_SIZE + 1) * width + 1, j * (CELL_SIZE + 1) + 1);\r\n    }\r\n  \r\n    ctx.stroke();\r\n};\r\n\r\n\r\nconst getIndex = (row, column) => {\r\n    return row * width + column;\r\n};\r\n\r\n// To get a pointer to the universe's cells, construct a Uint8Array \r\n// overlaying the cells buffer, iterate over each cell, and draw \r\n// a white or black rectangle depending on whether the cell is \r\n// dead or alive\r\nconst drawCells = () => {\r\n    const cellsPtr = universe.cells();\r\n    const cells = new Uint8Array(wasm_game_of_life_wasm_game_of_life_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"].buffer, cellsPtr, width * height);\r\n\r\n    ctx.beginPath();\r\n\r\n    for (let row = 0; row < height; row++) {\r\n        for (let col = 0; col < width; col++) {\r\n            const idx = getIndex(row, col);\r\n\r\n            ctx.fillStyle = cells[idx] === wasm_game_of_life__WEBPACK_IMPORTED_MODULE_0__[\"Cell\"].Dead\r\n                ? DEAD_COLOR\r\n                : ALIVE_COLOR;\r\n\r\n            ctx.fillRect(\r\n                col * (CELL_SIZE + 1) + 1,\r\n                row * (CELL_SIZE + 1) + 1,\r\n                CELL_SIZE,\r\n                CELL_SIZE\r\n            );\r\n        }\r\n    }\r\n\r\n    ctx.stroke();\r\n};\r\n\r\n/***************** */\r\n/** Control events */\r\n/***************** */\r\n// check if the game/frame is paused\r\nconst isPaused = () => {\r\n    return animationId === null;\r\n};\r\n\r\n// get the current state of the button\r\nconst playPauseButton = document.getElementById(\"play-pause\");\r\n\r\nconst play = () => {\r\n  playPauseButton.textContent = \"⏸\";\r\n  renderLoop();\r\n};\r\n\r\nconst pause = () => {\r\n  playPauseButton.textContent = \"▶\";\r\n  cancelAnimationFrame(animationId);\r\n  animationId = null;\r\n};\r\n\r\nplayPauseButton.addEventListener(\"click\", event => {\r\n  if (isPaused()) {\r\n    play();\r\n  } else {\r\n    pause();\r\n  }\r\n});\r\n\r\n/** Listen for a click event within the canvas*/\r\ncanvas.addEventListener(\"click\", event => {\r\n    const boundingRect = canvas.getBoundingClientRect();\r\n  \r\n    const scaleX = canvas.width / boundingRect.width;\r\n    const scaleY = canvas.height / boundingRect.height;\r\n  \r\n    const canvasLeft = (event.clientX - boundingRect.left) * scaleX;\r\n    const canvasTop = (event.clientY - boundingRect.top) * scaleY;\r\n  \r\n    const row = Math.min(Math.floor(canvasTop / (CELL_SIZE + 1)), height - 1);\r\n    const col = Math.min(Math.floor(canvasLeft / (CELL_SIZE + 1)), width - 1);\r\n  \r\n    universe.toggle_cell(row, col);\r\n  \r\n    drawGrid();\r\n    drawCells();\r\n});\r\n\r\n/******************* */\r\n/** Performance data */\r\n/******************* */\r\nconst fps = new class {\r\n    constructor() {\r\n      this.fps = document.getElementById(\"fps\");\r\n      this.frames = [];\r\n      this.lastFrameTimeStamp = performance.now();\r\n    }\r\n  \r\n    render() {\r\n      // Convert the delta time since the last frame render into a measure\r\n      // of frames per second.\r\n      const now = performance.now();\r\n      const delta = now - this.lastFrameTimeStamp;\r\n      this.lastFrameTimeStamp = now;\r\n      const fps = 1 / delta * 1000;\r\n  \r\n      // Save only the latest 100 timings.\r\n      this.frames.push(fps);\r\n      if (this.frames.length > 100) {\r\n        this.frames.shift();\r\n      }\r\n  \r\n      // Find the max, min, and mean of our 100 latest timings.\r\n      let min = Infinity;\r\n      let max = -Infinity;\r\n      let sum = 0;\r\n      for (let i = 0; i < this.frames.length; i++) {\r\n        sum += this.frames[i];\r\n        min = Math.min(this.frames[i], min);\r\n        max = Math.max(this.frames[i], max);\r\n      }\r\n      let mean = sum / this.frames.length;\r\n  \r\n      // Render the statistics.\r\n      this.fps.textContent = `\r\n  Frames per Second:\r\n           latest = ${Math.round(fps)}\r\n  avg of last 100 = ${Math.round(mean)}\r\n  min of last 100 = ${Math.round(min)}\r\n  max of last 100 = ${Math.round(max)}\r\n  `.trim();\r\n    }\r\n  };\r\n\r\n// This used to be `requestAnimationFrame(renderLoop)`.\r\nplay();\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);